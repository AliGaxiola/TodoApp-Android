<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/components/AddTaskDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/components/AddTaskDialog.kt" />
              <option name="originalContent" value="package com.example.todoapp.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.window.Dialog&#10;&#10;@Composable&#10;fun AddTaskDialog(&#10;    showDialog: Boolean,&#10;    onDismissDialog: () -&gt; Unit,&#10;    onConfirm: (String, String) -&gt; Unit, // Cambiado de onAddTask&#10;    initialTitle: String = &quot;&quot;,&#10;    initialDescription: String = &quot;&quot;,&#10;    isEditMode: Boolean = false&#10;) {&#10;    if (showDialog) {&#10;        var title by remember { mutableStateOf(initialTitle) }&#10;        var description by remember { mutableStateOf(initialDescription) }&#10;        Dialog(onDismissRequest = { onDismissDialog() }) {&#10;            Surface(&#10;                shape = RoundedCornerShape(20.dp),&#10;                color = MaterialTheme.colorScheme.background,&#10;                tonalElevation = 4.dp,&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(300.dp)&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(56.dp)&#10;                            .background(MaterialTheme.colorScheme.primary),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            if (isEditMode) &quot;Edit Task&quot; else &quot;Add Task&quot;,&#10;                            color = MaterialTheme.colorScheme.onPrimary,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = title,&#10;                        onValueChange = { title = it },&#10;                        label = { Text(&quot;Title&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    OutlinedTextField(&#10;                        value = description,&#10;                        onValueChange = { description = it },&#10;                        label = { Text(&quot;Description&quot;) },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp),&#10;                        maxLines = 3&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        TextButton(&#10;                            onClick = {&#10;                                title = initialTitle&#10;                                description = initialDescription&#10;                                onDismissDialog() }&#10;                        ) {&#10;                            Text(&quot;Cancel&quot;)&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                        Button(&#10;                            onClick = {&#10;                                onConfirm(title, description)&#10;                                title = initialTitle&#10;                                description = initialDescription&#10;                                onDismissDialog()&#10;                            },&#10;                            enabled = title.isNotBlank()&#10;                        ) {&#10;                            Text(if (isEditMode) &quot;Save Changes&quot; else &quot;Add Task&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.todoapp.ui.components&#13;&#10;&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.layout.Arrangement&#13;&#10;import androidx.compose.foundation.layout.Box&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.Row&#13;&#10;import androidx.compose.foundation.layout.Spacer&#13;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#13;&#10;import androidx.compose.foundation.layout.height&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.layout.width&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.material3.Button&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.OutlinedTextField&#13;&#10;import androidx.compose.material3.Surface&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.material3.TextButton&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.runtime.mutableStateOf&#13;&#10;import androidx.compose.runtime.remember&#13;&#10;import androidx.compose.runtime.setValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.window.Dialog&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun AddTaskDialog(&#13;&#10;    showDialog: Boolean,&#13;&#10;    onDismissDialog: () -&gt; Unit,&#13;&#10;    onConfirm: (String, String) -&gt; Unit, // Cambiado de onAddTask&#13;&#10;    initialTitle: String = &quot;&quot;,&#13;&#10;    initialDescription: String = &quot;&quot;,&#13;&#10;    isEditMode: Boolean = false&#13;&#10;) {&#13;&#10;    if (showDialog) {&#13;&#10;        var title by remember { mutableStateOf(initialTitle) }&#13;&#10;        var description by remember { mutableStateOf(initialDescription) }&#13;&#10;        Dialog(onDismissRequest = { onDismissDialog() }) {&#13;&#10;            Surface(&#13;&#10;                shape = RoundedCornerShape(20.dp),&#13;&#10;                color = MaterialTheme.colorScheme.background,&#13;&#10;                tonalElevation = 4.dp,&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .width(300.dp)&#13;&#10;                ) {&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .height(56.dp)&#13;&#10;                            .background(MaterialTheme.colorScheme.primary),&#13;&#10;                        contentAlignment = Alignment.Center&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            if (isEditMode) &quot;Edit Task&quot; else &quot;Add Task&quot;,&#13;&#10;                            color = MaterialTheme.colorScheme.onPrimary,&#13;&#10;                            style = MaterialTheme.typography.titleLarge&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    OutlinedTextField(&#13;&#10;                        value = title,&#13;&#10;                        onValueChange = { title = it },&#13;&#10;                        label = { Text(&quot;Title&quot;) },&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(horizontal = 16.dp),&#13;&#10;                        singleLine = true&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;&#13;&#10;                    OutlinedTextField(&#13;&#10;                        value = description,&#13;&#10;                        onValueChange = { description = it },&#13;&#10;                        label = { Text(&quot;Description&quot;) },&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(horizontal = 16.dp),&#13;&#10;                        maxLines = 3&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;                    Row(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .padding(horizontal = 16.dp, vertical = 8.dp),&#13;&#10;                        horizontalArrangement = Arrangement.End&#13;&#10;                    ) {&#13;&#10;                        TextButton(&#13;&#10;                            onClick = {&#13;&#10;                                title = initialTitle&#13;&#10;                                description = initialDescription&#13;&#10;                                onDismissDialog() }&#13;&#10;                        ) {&#13;&#10;                            Text(&quot;Cancel&quot;)&#13;&#10;                        }&#13;&#10;&#13;&#10;                        Spacer(modifier = Modifier.width(8.dp))&#13;&#10;&#13;&#10;                        Button(&#13;&#10;                            onClick = {&#13;&#10;                                onConfirm(title, description)&#13;&#10;                                title = initialTitle&#13;&#10;                                description = initialDescription&#13;&#10;                                onDismissDialog()&#13;&#10;                            },&#13;&#10;                            enabled = title.isNotBlank()&#13;&#10;                        ) {&#13;&#10;                            Text(if (isEditMode) &quot;Save Changes&quot; else &quot;Add Task&quot;)&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/todo/TodoScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/todo/TodoScreen.kt" />
              <option name="originalContent" value="package com.example.todoapp.ui.todo&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import com.example.todoapp.domain.model.TodoItem&#10;import com.example.todoapp.ui.components.AddTaskDialog&#10;import com.example.todoapp.ui.components.TodoFAB&#10;import com.example.todoapp.ui.components.TodoCard&#10;import com.example.todoapp.ui.components.TodoTopAppBar&#10;&#10;@Composable&#10;fun TodoScreen(modifier: Modifier = Modifier, viewModel: TodoViewModel = viewModel()) {&#10;    val todos by viewModel.todos.collectAsState()&#10;    val (showDialog, setShowDialog) = remember { mutableStateOf(false) }&#10;    val (editTodo, setEditTodo) = remember { mutableStateOf&lt;TodoItem?&gt;(null) }&#10;&#10;    // Mostrar el diálogo de agregar/editar&#10;    AddTaskDialog(&#10;        showDialog = showDialog,&#10;        onDismissDialog = {&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        onConfirm = { title, description -&gt;&#10;            if (editTodo == null) {&#10;                viewModel.addTodo(title, description)&#10;            } else {&#10;                viewModel.editTodo(editTodo.id, title, description)&#10;            }&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        initialTitle = editTodo?.title ?: &quot;&quot;,&#10;        initialDescription = editTodo?.description ?: &quot;&quot;,&#10;        isEditMode = editTodo != null&#10;    )&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            TodoFAB {&#10;                setEditTodo(null)&#10;                setShowDialog(true)&#10;            }&#10;        },&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        topBar = { com.example.todoapp.ui.components.TodoTopAppBar() }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            if (todos.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No tasks available. Add a new task!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                    items(todos) { todo -&gt;&#10;                        TodoCard(&#10;                            title = todo.title,&#10;                            description = todo.description,&#10;                            isComplete = todo.isComplete,&#10;                            onToggleComplete = { viewModel.toggleComplete(todo.id) },&#10;                            onClickDelete = { viewModel.removeTodo(todo.id) },&#10;                            onClickEdit = {&#10;                                setEditTodo(todo)&#10;                                setShowDialog(true)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.todoapp.ui.todo&#10;&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import com.example.todoapp.domain.model.TodoItem&#10;import com.example.todoapp.ui.components.AddTaskDialog&#10;import com.example.todoapp.ui.components.TodoFAB&#10;import com.example.todoapp.ui.components.TodoCard&#10;import com.example.todoapp.ui.components.TodoTopAppBar&#10;&#10;@Composable&#10;fun TodoScreen(modifier: Modifier = Modifier, viewModel: TodoViewModel = viewModel()) {&#10;    val todos by viewModel.todos.collectAsState()&#10;    val (showDialog, setShowDialog) = remember { mutableStateOf(false) }&#10;    val (editTodo, setEditTodo) = remember { mutableStateOf&lt;TodoItem?&gt;(null) }&#10;&#10;    // Mostrar el diálogo de agregar/editar&#10;    AddTaskDialog(&#10;        showDialog = showDialog,&#10;        onDismissDialog = {&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        onConfirm = { title, description -&gt;&#10;            if (editTodo == null) {&#10;                viewModel.addTodo(title, description)&#10;            } else {&#10;                viewModel.editTodo(editTodo.id, title, description)&#10;            }&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        initialTitle = editTodo?.title ?: &quot;&quot;,&#10;        initialDescription = editTodo?.description ?: &quot;&quot;,&#10;        isEditMode = editTodo != null&#10;    )&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            TodoFAB {&#10;                setEditTodo(null)&#10;                setShowDialog(true)&#10;            }&#10;        },&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        topBar = { com.example.todoapp.ui.components.TodoTopAppBar() }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            if (todos.isEmpty()) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No tasks available. Add a new task!&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            } else {&#10;                LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                    items(todos) { todo -&gt;&#10;                        TodoCard(&#10;                            title = todo.title,&#10;                            description = todo.description,&#10;                            isComplete = todo.isComplete,&#10;                            onToggleComplete = { viewModel.toggleComplete(todo.id) },&#10;                            onClickDelete = { viewModel.removeTodo(todo.id) },&#10;                            onClickEdit = {&#10;                                setEditTodo(todo)&#10;                                setShowDialog(true)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>