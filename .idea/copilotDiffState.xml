<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/todo/TodoViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/todo/TodoViewModel.kt" />
              <option name="originalContent" value="package com.example.todoapp.ui.todo&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.todoapp.domain.model.TodoItem&#10;import com.example.todoapp.domain.repository.TodoRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class TodoViewModel(private val repository: TodoRepository) : ViewModel() {&#10;&#10;    val todos: StateFlow&lt;List&lt;TodoItem&gt;&gt; = repository.getAllTodos()&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun addTodo(title: String, description: String) {&#10;        viewModelScope.launch {&#10;            val newTodo = TodoItem(&#10;                title = title,&#10;                description = description,&#10;                isCompleted = false&#10;            )&#10;            repository.insertTodo(newTodo)&#10;        }&#10;    }&#10;&#10;    fun toggleComplete(id: Int) {&#10;        viewModelScope.launch {&#10;            val currentList = todos.value&#10;            val todo = currentList.find { it.id == id }&#10;            if (todo != null) {&#10;                repository.updateTodo(todo.copy(isCompleted = !todo.isCompleted))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun removeTodo(id: Int) {&#10;        viewModelScope.launch {&#10;            val todo = todos.value.find { it.id == id }&#10;            if (todo != null) {&#10;                repository.deleteTodo(todo)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun editTodo(id: Int, newTitle: String, newDescription: String) {&#10;        viewModelScope.launch {&#10;            val todo = todos.value.find { it.id == id }&#10;            if (todo != null) {&#10;                repository.updateTodo(todo.copy(title = newTitle, description = newDescription))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAllTodos() {&#10;        viewModelScope.launch {&#10;            repository.clearAll()&#10;        }&#10;    }&#10;&#10;    fun clearCompletedTodos() {&#10;        viewModelScope.launch {&#10;            repository.clearCompleted()&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.todoapp.ui.todo&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.todoapp.domain.model.TodoItem&#10;import com.example.todoapp.domain.repository.TodoRepository&#10;import kotlinx.coroutines.flow.SharingStarted&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.stateIn&#10;import kotlinx.coroutines.launch&#10;&#10;class TodoViewModel(private val repository: TodoRepository) : ViewModel() {&#10;&#10;    val todos: StateFlow&lt;List&lt;TodoItem&gt;&gt; = repository.getAllTodos()&#10;        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())&#10;&#10;    fun addTodo(title: String, description: String) {&#10;        viewModelScope.launch {&#10;            val newTodo = TodoItem(&#10;                title = title,&#10;                description = description,&#10;                isCompleted = false&#10;            )&#10;            repository.insertTodo(newTodo)&#10;        }&#10;    }&#10;&#10;    fun toggleComplete(id: Int) {&#10;        viewModelScope.launch {&#10;            val currentList = todos.value&#10;            val todo = currentList.find { it.id == id }&#10;            if (todo != null) {&#10;                repository.updateTodo(todo.copy(isCompleted = !todo.isCompleted))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun removeTodo(id: Int) {&#10;        viewModelScope.launch {&#10;            val todo = todos.value.find { it.id == id }&#10;            if (todo != null) {&#10;                repository.deleteTodo(todo)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun editTodo(id: Int, newTitle: String, newDescription: String) {&#10;        viewModelScope.launch {&#10;            val todo = todos.value.find { it.id == id }&#10;            if (todo != null) {&#10;                repository.updateTodo(todo.copy(title = newTitle, description = newDescription))&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearAllTodos() {&#10;        viewModelScope.launch {&#10;            repository.clearAll()&#10;        }&#10;    }&#10;&#10;    fun clearCompletedTodos() {&#10;        viewModelScope.launch {&#10;            repository.clearCompleted()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>