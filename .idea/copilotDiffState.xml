<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/todo/TodoScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/todoapp/ui/todo/TodoScreen.kt" />
              <option name="originalContent" value="package com.example.todoapp.ui.todo&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.unit.dp&#10;import com.example.todoapp.domain.model.TodoItem&#10;import com.example.todoapp.ui.components.AddTaskDialog&#10;import com.example.todoapp.ui.components.TodoFAB&#10;import com.example.todoapp.ui.components.TodoCard&#10;import com.example.todoapp.ui.components.TodoTopAppBar&#10;&#10;@Composable&#10;fun TodoScreen(modifier: Modifier = Modifier, viewModel: TodoViewModel = viewModel()) {&#10;    val todos by viewModel.todos.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val (showDialog, setShowDialog) = remember { mutableStateOf(false) }&#10;    val (editTodo, setEditTodo) = remember { mutableStateOf&lt;TodoItem?&gt;(null) }&#10;    val (showDeleteDialog, setShowDeleteDialog) = remember { mutableStateOf(false) }&#10;    val (todoToDelete, setTodoToDelete) = remember { mutableStateOf&lt;TodoItem?&gt;(null) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            TodoFAB {&#10;                setEditTodo(null)&#10;                setShowDialog(true)&#10;            }&#10;        },&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        topBar = { TodoTopAppBar() }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                todos.isEmpty() -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No tasks available. Add a new task!&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    val hasCompleted = todos.any { it.isCompleted }&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(end = 16.dp),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        TextButton(onClick = { viewModel.clearAllTodos() }) {&#10;                            Text(&quot;Clear all&quot;)&#10;                        }&#10;                        if (hasCompleted) {&#10;                            TextButton(onClick = { viewModel.clearCompletedTodos() }) {&#10;                                Text(&quot;Clear completed&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                        items(todos) { todo -&gt;&#10;                            TodoCard(&#10;                                title = todo.title,&#10;                                description = todo.description,&#10;                                isCompleted = todo.isCompleted,&#10;                                onToggleComplete = { viewModel.toggleComplete(todo.id) },&#10;                                onClickDelete = {&#10;                                    setTodoToDelete(todo)&#10;                                    setShowDeleteDialog(true)&#10;                                },&#10;                                onClickEdit = {&#10;                                    setEditTodo(todo)&#10;                                    setShowDialog(true)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    AddTaskDialog(&#10;        showDialog = showDialog,&#10;        onDismissDialog = {&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        onConfirm = { title, description -&gt;&#10;            if (editTodo == null) {&#10;                viewModel.addTodo(title, description)&#10;            } else {&#10;                viewModel.editTodo(editTodo.id, title, description)&#10;            }&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        initialTitle = editTodo?.title ?: &quot;&quot;,&#10;        initialDescription = editTodo?.description ?: &quot;&quot;,&#10;        isEditMode = editTodo != null&#10;    )&#10;&#10;    com.example.todoapp.ui.components.ConfirmDeleteDialog(&#10;        show = showDeleteDialog,&#10;        onConfirm = {&#10;            todoToDelete?.let { viewModel.removeTodo(it.id) }&#10;            setShowDeleteDialog(false)&#10;            setTodoToDelete(null)&#10;        },&#10;        onDismiss = {&#10;            setShowDeleteDialog(false)&#10;            setTodoToDelete(null)&#10;        }&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.todoapp.ui.todo&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.unit.dp&#10;import com.example.todoapp.domain.model.TodoItem&#10;import com.example.todoapp.ui.components.AddTaskDialog&#10;import com.example.todoapp.ui.components.TodoFAB&#10;import com.example.todoapp.ui.components.TodoCard&#10;import com.example.todoapp.ui.components.TodoTopAppBar&#10;&#10;@Composable&#10;fun TodoScreen(modifier: Modifier = Modifier, viewModel: TodoViewModel = viewModel()) {&#10;    val todos by viewModel.todos.collectAsState()&#10;    val isLoading by viewModel.isLoading.collectAsState()&#10;    val (showDialog, setShowDialog) = remember { mutableStateOf(false) }&#10;    val (editTodo, setEditTodo) = remember { mutableStateOf&lt;TodoItem?&gt;(null) }&#10;    val (showDeleteDialog, setShowDeleteDialog) = remember { mutableStateOf(false) }&#10;    val (todoToDelete, setTodoToDelete) = remember { mutableStateOf&lt;TodoItem?&gt;(null) }&#10;&#10;    Scaffold(&#10;        floatingActionButton = {&#10;            TodoFAB {&#10;                setEditTodo(null)&#10;                setShowDialog(true)&#10;            }&#10;        },&#10;        containerColor = MaterialTheme.colorScheme.background,&#10;        topBar = { TodoTopAppBar() }&#10;    ) { innerPadding -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(innerPadding)&#10;        ) {&#10;            when {&#10;                isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                todos.isEmpty() -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No tasks available. Add a new task!&quot;,&#10;                            style = MaterialTheme.typography.bodyLarge,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;                }&#10;                else -&gt; {&#10;                    val hasCompleted = todos.any { it.isCompleted }&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(end = 16.dp),&#10;                        horizontalArrangement = Arrangement.End&#10;                    ) {&#10;                        TextButton(onClick = { viewModel.clearAllTodos() }) {&#10;                            Text(&quot;Clear all&quot;)&#10;                        }&#10;                        if (hasCompleted) {&#10;                            TextButton(onClick = { viewModel.clearCompletedTodos() }) {&#10;                                Text(&quot;Clear completed&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    LazyColumn(modifier = Modifier.fillMaxSize()) {&#10;                        items(todos) { todo -&gt;&#10;                            TodoCard(&#10;                                title = todo.title,&#10;                                description = todo.description,&#10;                                isCompleted = todo.isCompleted,&#10;                                onToggleComplete = { viewModel.toggleComplete(todo.id) },&#10;                                onClickDelete = {&#10;                                    setTodoToDelete(todo)&#10;                                    setShowDeleteDialog(true)&#10;                                },&#10;                                onClickEdit = {&#10;                                    setEditTodo(todo)&#10;                                    setShowDialog(true)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    AddTaskDialog(&#10;        showDialog = showDialog,&#10;        onDismissDialog = {&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        onConfirm = { title, description -&gt;&#10;            if (editTodo == null) {&#10;                viewModel.addTodo(title, description)&#10;            } else {&#10;                viewModel.editTodo(editTodo.id, title, description)&#10;            }&#10;            setShowDialog(false)&#10;            setEditTodo(null)&#10;        },&#10;        initialTitle = editTodo?.title ?: &quot;&quot;,&#10;        initialDescription = editTodo?.description ?: &quot;&quot;,&#10;        isEditMode = editTodo != null&#10;    )&#10;&#10;    com.example.todoapp.ui.components.ConfirmDeleteDialog(&#10;        show = showDeleteDialog,&#10;        onConfirm = {&#10;            todoToDelete?.let { viewModel.removeTodo(it.id) }&#10;            setShowDeleteDialog(false)&#10;            setTodoToDelete(null)&#10;        },&#10;        onDismiss = {&#10;            setShowDeleteDialog(false)&#10;            setTodoToDelete(null)&#10;        }&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>